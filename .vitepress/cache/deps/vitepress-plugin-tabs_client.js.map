{
  "version": 3,
  "sources": ["../../../node_modules/vitepress-plugin-tabs/src/client/index.ts", "../../../node_modules/vitepress-plugin-tabs/src/client/useTabsSelectedState.ts"],
  "sourcesContent": ["import type { App } from 'vue'\r\nimport PluginTabs from './PluginTabs.vue'\r\nimport PluginTabsTab from './PluginTabsTab.vue'\r\nimport { provideTabsSharedState } from './useTabsSelectedState'\r\n\r\nexport const enhanceAppWithTabs = (app: App) => {\r\n  provideTabsSharedState(app)\r\n  app.component('PluginTabs', PluginTabs)\r\n  app.component('PluginTabsTab', PluginTabsTab)\r\n}\r\n", "import { ref, computed, reactive, inject, watch, onMounted } from 'vue'\r\nimport type { App, Ref, InjectionKey } from 'vue'\r\n\r\ntype TabsSharedState = {\r\n  content?: TabsSharedStateContent\r\n}\r\ntype TabsSharedStateContent = Record<string, string>\r\n\r\nconst injectionKey: InjectionKey<TabsSharedState> =\r\n  'vitepress:tabSharedState' as unknown as symbol\r\nconst ls = typeof localStorage !== 'undefined' ? localStorage : null\r\nconst localStorageKey = 'vitepress:tabsSharedState'\r\n\r\nconst getLocalStorageValue = (): TabsSharedStateContent => {\r\n  const rawValue = ls?.getItem(localStorageKey)\r\n  if (rawValue) {\r\n    try {\r\n      return JSON.parse(rawValue)\r\n    } catch {}\r\n  }\r\n  return {}\r\n}\r\nconst setLocalStorageValue = (v: TabsSharedStateContent) => {\r\n  if (!ls) return\r\n  ls.setItem(localStorageKey, JSON.stringify(v))\r\n}\r\n\r\nexport const provideTabsSharedState = (app: App) => {\r\n  const state = reactive<TabsSharedState>({})\r\n  watch(\r\n    () => state.content,\r\n    (newStateContent, oldStateContent) => {\r\n      // skip initialize\r\n      if (newStateContent && oldStateContent) {\r\n        setLocalStorageValue(newStateContent)\r\n      }\r\n    },\r\n    { deep: true }\r\n  )\r\n\r\n  app.provide(injectionKey, state)\r\n}\r\n\r\nexport const useTabsSelectedState = <T extends string>(\r\n  acceptValues: Ref<T[]>,\r\n  sharedStateKey: Ref<string | undefined>\r\n) => {\r\n  const sharedState = inject(injectionKey)\r\n  if (!sharedState) {\r\n    throw new Error(\r\n      '[vitepress-plugin-tabs] TabsSharedState should be injected'\r\n    )\r\n  }\r\n\r\n  onMounted(() => {\r\n    if (!sharedState.content) {\r\n      sharedState.content = getLocalStorageValue()\r\n    }\r\n  })\r\n\r\n  const nonSharedState = ref<T | undefined>()\r\n\r\n  const selected = computed({\r\n    get() {\r\n      const key = sharedStateKey.value\r\n      const acceptVals = acceptValues.value\r\n      if (key) {\r\n        const value = sharedState.content?.[key]\r\n        if (value && (acceptVals as string[]).includes(value)) {\r\n          return value as T\r\n        }\r\n      } else {\r\n        const nonSharedStateVal = nonSharedState.value\r\n        if (nonSharedStateVal) {\r\n          return nonSharedStateVal\r\n        }\r\n      }\r\n      return acceptVals[0]\r\n    },\r\n    set(v) {\r\n      const key = sharedStateKey.value\r\n      if (key) {\r\n        if (sharedState.content) {\r\n          sharedState.content[key] = v\r\n        }\r\n      } else {\r\n        nonSharedState.value = v\r\n      }\r\n    }\r\n  })\r\n  const select = (newValue: T) => {\r\n    selected.value = newValue\r\n  }\r\n\r\n  return { selected, select }\r\n}\r\n"],
  "mappings": ";;;;;;;AACA,OAAO,gBAAgB;AACvB,OAAO,mBAAmB;;;ACM1B,IAAM,eACJ;AACF,IAAM,KAAK,OAAO,iBAAiB,cAAc,eAAe;AAChE,IAAM,kBAAkB;AAWxB,IAAM,uBAAuB,CAAC,MAA8B;AAC1D,MAAI,CAAC;AAAI;AACT,KAAG,QAAQ,iBAAiB,KAAK,UAAU,CAAC,CAAC;AAC/C;AAEO,IAAM,yBAAyB,CAAC,QAAa;AAClD,QAAM,QAAQ,SAA0B,CAAC,CAAC;AAC1C;AAAA,IACE,MAAM,MAAM;AAAA,IACZ,CAAC,iBAAiB,oBAAoB;AAEpC,UAAI,mBAAmB,iBAAiB;AACtC,6BAAqB,eAAe;AAAA,MACtC;AAAA,IACF;AAAA,IACA,EAAE,MAAM,KAAK;AAAA,EACf;AAEA,MAAI,QAAQ,cAAc,KAAK;AACjC;;;ADpCO,IAAM,qBAAqB,CAAC,QAAa;AAC9C,yBAAuB,GAAG;AAC1B,MAAI,UAAU,cAAc,UAAU;AACtC,MAAI,UAAU,iBAAiB,aAAa;AAC9C;",
  "names": []
}
